#!/bin/bash
# -*- sh -*-

: <<=cut

=head1 NAME

OnlyOffice - OnlyOffice

=head1 APPLICABLE SYSTEMS

Any system with OnlyOffice Document Server

=head1 CONFIGURATION

No configuration necessary.

=head1 INTERPRETATION

This plugin collects statistics from the OnlyOffice Document Server HTTP-API.

=head1 MAGIC MARKERS

  #%# family=manual
  #%# capabilities=autoconf

=head1 BUGS

None known

=head1 AUTHOR

laurent.spagnol@univ-reims.fr

=head1 LICENSE

GPLv2

=cut

########################################################################
#
# INSTALL:
#
#   apt -y install jq curl wget
#   wget -O onlyoffice_ https://raw.githubusercontent.com/lspagnol/misc-scripts/master/onlyoffice_documentserver
#   chmod +x onlyoffice_
#   mkdir /usr/local/share/munin
#   cp onlyoffice_documentserver /usr/local/share/munin
#   ln -s /usr/local/share/munin/onlyoffice_documentserver /etc/munin/plugins/onlyoffice_documentserver
#   service munin-node restart
#
########################################################################

. $MUNIN_LIBDIR/plugins/plugin.sh

########################################################################

function get_DS_STATS {
# Try with curl
if [ -f /usr/bin/curl ] ; then
	DS_STATS=$(curl -s -f -m 3 http://localhost:8000/info/info.json)
	[ -z "${DS_STATS}" ] && exit
else
	if [ -f /usr/bin/wget ] ; then
		wget -T2 -t1 -q -O /tmp/info.json http://localhost:8000/info/info.json
		if [ $? -eq 0 ] ; then
			DS_STATS=$(cat /tmp/info.json 2>/dev/null)
			[ -z "${DS_STATS}" ] && exit
		else
			echo "Please install curl or wget"
			exit 1
		fi
	fi
fi
}

########################################################################

if [ "$1" = "autoconf" ] ; then
        echo yes
        exit 0
fi

metrics=$(echo $(basename ${0}))
metrics=${metrics#*_}

case ${metrics} in
	conferences)
		STATS="participants videochannels videostreams endpoints_sending_audio endpoints_sending_video conferences inactive_endpoints inactive_conferences"
	;;
	network)
		STATS="bit_rate_download bit_rate_upload"
	;;
esac

########################################################################

# curl -s http://localhost:8000/info/info.json |jq ".connectionsStat.hour.edit.max"
# curl localhost:8000/info/info.json |jq ".licenseInfo.connections"
if [ "${1}" = "config" ] ; then

case ${metrics} in

	connexions)

cat<<EOT
graph_category onlyoffice
graph_title Connexions
graph_args --base 1000 -l 0
graph_vlabel number
graph_order connexions_limit connexions_peak
connexions_limit.label connexions limit
connexions_limit.draw area
connexions_peak.label connexions peak
EOT
		for stat in ${STATS} ; do
			echo "${stat}.label ${stat}"
		done
		;;

		network)
cat<<EOT
graph_title Network
graph_args --base 1000 -l 0
graph_vlabel bits in (-) / out (+) per second
graph_order bit_rate_download bit_rate_upload
bit_rate_download.graph no
bit_rate_download.min 0
bit_rate_download.label received
bit_rate_upload.negative bit_rate_download
bit_rate_upload.min 0
bit_rate_upload.label bps
EOT
		;;

		system)
cat<<EOT
graph_title System
graph_args --upper-limit 100 -l 0
graph_vlabel %
graph_scale no
cpu.label cpu
mem.label mem
EOT
		;;

	esac

	exit 0

fi

########################################################################

case ${metrics} in

	conferences|network)
	
		get_DS_STATS
		
		for stat in ${STATS} ; do
			val=$(echo ${DS_STATS} | jq ".${stat}")
		    val=${val:-0}
		    [ ${metrics} = "network" ] && val=$(( ${val} * 1024 ))
		    echo "${stat}.value ${val}"
		done

	;;

	system)

		pid=$(cat /var/run/onlyoffice/onlyoffice.pid)
		val=$(top -b -n 2 -d 1 -p $pid | tail -1 | awk '{print $9" "$10}' |sed 's/,/./g')
		val=(${val})
		cpu=${val[0]}
		mem=${val[1]}
		ncpu=$(cat /proc/cpuinfo |grep -c '^processor')
		cpu=$(echo "scale=1 ; ${cpu}/${ncpu}" |bc |sed 's/^\./0./g')
		echo "cpu.value ${cpu}"
		echo "mem.value ${mem}"

	;;

esac

########################################################################

exit 0
