#!/bin/bash
# -*- sh -*-

: <<=cut

=head1 NAME

jitsi-videobridge-conferences - Jitsi conferences

=head1 APPLICABLE SYSTEMS

Any system with jitsi-videobridge installed and enabled statistics

=head1 CONFIGURATION

No configuration necessary.

=head1 INTERPRETATION

This plugin collects statistics from the jitsi-videobridge HTTP-API.

=head1 MAGIC MARKERS

  #%# family=manual
  #%# capabilities=autoconf

=head1 BUGS

None known

=head1 AUTHOR

laurent.spagnol@univ-reims.fr

=head1 LICENSE

GPLv2

=cut

########################################################################
# Adapted from https://gitlab.gwdg.de/bwegman1/Munin-Plugins/-/blob/master/plugins/jitsi-videobridge
#
# INSTALL:
#
#   apt -y install jq bc wget
#   wget -O jitsi-videobridge_ https://raw.githubusercontent.com/lspagnol/misc-scripts/master/jitsi-videobridge_
#   chmod +x jitsi-videobridge_
#   mkdir /usr/local/share/munin
#   cp jitsi-videobridge_ /usr/local/share/munin
#   ln -s /usr/local/share/munin/jitsi-videobridge_ /etc/munin/plugins/jitsi-videobridge_network
#   ln -s /usr/local/share/munin/jitsi-videobridge_ /etc/munin/plugins/jitsi-videobridge_conferences
#   ln -s /usr/local/share/munin/jitsi-videobridge_ /etc/munin/plugins/jitsi-videobridge_system
#   echo -e "[jitsi-videobridge_system]\nuser root" > /etc/munin/plugin-conf.d/jitsi-videobridge_system
#   service munin-node restart
#
########################################################################

. $MUNIN_LIBDIR/plugins/plugin.sh

########################################################################

function get_JITSI_STATS {
# Try with curl
if [ -f /usr/bin/curl ] ; then
	JITSI_STATS=$(curl -s -f -m 3 http://localhost:8080/colibri/stats)
	[ -z "${JITSI_STATS}" ] && exit
else
	# Curl is removed when shibboleth is installed on Debian or Ubuntu
	if [ -f /usr/bin/wget ] ; then
		wget -T2 -t1 -q -O /tmp/jitsi-videobridge.stats http://localhost:8080/colibri/stats
		if [ $? -eq 0 ] ; then
			JITSI_STATS=$(cat /tmp/jitsi-videobridge.stats 2>/dev/null)
			[ -z "${JITSI_STATS}" ] && exit
		else
			echo "Please install curl or wget"
			exit 1
		fi
	fi
fi
}

########################################################################

if [ "$1" = "autoconf" ] ; then
        echo yes
        exit 0
fi

metrics=$(echo $(basename ${0}))
metrics=${metrics#*_}

case ${metrics} in
	conferences)
		STATS="participants videochannels videostreams endpoints_sending_audio endpoints_sending_video conferences inactive_endpoints inactive_conferences"
	;;
	network)
		STATS="bit_rate_download bit_rate_upload"
	;;
esac

########################################################################

if [ "${1}" = "config" ] ; then

cat<<EOT
graph_category jitsi-videobridge
EOT

	case ${metrics} in

		conferences)
cat<<EOT
graph_title Conferences
graph_args --base 1000 -l 0
graph_vlabel number
graph_order conferences participants endpoints_sending_video endpoints_sending_audio videochannels videostreams inactive_endpoints inactive_conferences
EOT
		for stat in ${STATS} ; do
			echo "${stat}.label ${stat}"
		done
		;;

		network)
cat<<EOT
graph_title Network
graph_args --base 1000 -l 0
graph_vlabel bits in (-) / out (+) per second
graph_order bit_rate_download bit_rate_upload
bit_rate_download.graph no
bit_rate_download.min 0
bit_rate_download.label received
bit_rate_upload.negative bit_rate_download
bit_rate_upload.min 0
bit_rate_upload.label bps
EOT
		;;

		system)
cat<<EOT
graph_title System
graph_args --upper-limit 100 -l 0
graph_vlabel %
graph_scale no
cpu.label cpu
mem.label mem
EOT
		;;

	esac

	exit 0

fi

########################################################################

case ${metrics} in

	conferences|network)
	
		get_JITSI_STATS
		
		for stat in ${STATS} ; do
			val=$(echo ${JITSI_STATS} | jq ".${stat}")
		    val=${val:-0}
		    [ ${metrics} = "network" ] && val=$(( ${val} * 1024 ))
		    echo "${stat}.value ${val}"
		done

	;;

	system)

		pid=$(cat /var/run/jitsi-videobridge/jitsi-videobridge.pid)
		val=$(top -b -n 2 -d 1 -p $pid | tail -1 | awk '{print $9" "$10}' |sed 's/,/./g')
		val=(${val})
		cpu=${val[0]}
		mem=${val[1]}
		ncpu=$(cat /proc/cpuinfo |grep -c '^processor')
		cpu=$(echo "scale=1 ; ${cpu}/${ncpu}" |bc |sed 's/ ./0./g')
		echo "cpu.value ${cpu}"
		echo "mem.value ${mem}"

	;;

esac

########################################################################

exit 0
